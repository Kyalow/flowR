% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotGatingSet2_module.R
\name{plotGatingSet2Input}
\alias{plotGatingSet2Input}
\alias{plotGatingSet2}
\title{plotGatingSet2Input and plotGatingSet2}
\usage{
plotGatingSet2Input(id)

plotGatingSet2(
  input,
  output,
  session,
  rval,
  plot_params = reactiveValues(),
  simple_plot = TRUE,
  auto_update = TRUE,
  show_gates = FALSE,
  polygon_gate = NULL
)
}
\arguments{
\item{id}{shiny id}

\item{input}{shiny input}

\item{output}{shiny output}

\item{session}{shiny session}

\item{rval}{a reactivevalues object with the following elements :
\describe{
  \item{gating_set}{: a GatingSet object}
  \item{apply_trans}{: logical; apply transformations defined in \code{rval$gating_set}}
  \item{apply_comp}{: logical; apply compensation defined in \code{rval$gating_set}}
}}

\item{plot_params}{reactivevalues object used to initialize plot parameters. 
Amongst others it can contain the following elements (not mandatory):
\describe{
  \item{plot_type}{: type of plot}
  \item{sample}{: names of samples}
  \item{subset}{: names of subsets}
  \item{xvar}{: x-axis variables}
  \item{yvar}{: y-axis variables}
  \item{color_var}{: color aesthetic}
  \item{group_var}{: group aesthetic}
  \item{facet_var}{: variable used to show different plot facets}
  \item{split_var}{: variable used to create multiple plots}
 }}

\item{simple_plot}{logical, disable a number of plot options 
(such as faceting, multiple plots with different x, y or color variables)}

\item{auto_update}{Should plot update be automatic? 
If FALSE, plot update is controlled by an action button.}

\item{show_gates}{Should gates with coordinates matching plot coordinates be displayed}

\item{polygon_gate}{a reactiveValues object with polygon coordinates to be plotted as 
an additionnal layer.
Must contain elements :
\describe{
  \item{x}{vector of x coordinates}
  \item{y}{vector of y coordinates}
}}
}
\value{
A reactivevalues object with the following elements :
\describe{
  \item{plot}{a plot or a list of plots}
  \item{params}{plot parameters}
}
}
\description{
A shiny Module (ui function) to build plots from a GatingSet
}
\examples{
\dontrun{
library(shiny)
library(shinydashboard)
library(flowWorkspace)
library(flowCore)
library(viridis)
library(scales)
library(ggplot2)
library(ggrepel)
library(plotly)
library(ggridges)

if (interactive()){
  
  ui <- dashboardPage(
    dashboardHeader(title = "plotGatingSet2"),
    sidebar = dashboardSidebar(disable = TRUE),
    body = dashboardBody(
      fluidRow(
        column(4, box(width = NULL, plotGatingSet2Input("module"))),
        column(8, box(width = NULL, simpleDisplayUI("simple_display_module")))
      )
    )
  )
  
  server <- function(input, output, session) {
    
    rval <- reactiveValues()
    plot_params <- reactiveValues()
    
    observe({
      gs <- load_gs("./inst/ext/gs")
      rval$gating_set <- gs
      plot_params$plot_type <- "histogram"
    })
    
    res <- callModule(plotGatingSet2, "module",
                      rval = rval,
                      plot_params = plot_params)
    
    callModule(simpleDisplay, "simple_display_module", res$plot)
    
  }
  
  shinyApp(ui, server)
  
}}
}
